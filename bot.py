import telebot
import sqlite3
from datetime import datetime
from telebot import types
import matplotlib.pyplot as plt
import numpy as np


from config import API_TOKEN

bot = telebot.TeleBot(API_TOKEN)

def setup_database():
    """–°–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä."""
    conn = sqlite3.connect('moodbase.sql')
    cur = conn.cursor()

    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É 'moodbase.sql' —Å –ø–æ–ª—è–º–∏ id, date, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    cur.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)')
    cur.execute("""CREATE TABLE IF NOT EXISTS mood_responses
                (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id  INTEGER, date DATE, response TEXT)""")

    conn.commit()
    cur.close()
    conn.close()

# """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ matplotlib."""
# def mood_plot():
#     x = np.linspace(0, 2 * np.pi, 200)
#     y = np.sin(x)

#     fig, ax = plt.subplots()
#     ax.plot(x, y)
#     plt.show()



"""–•–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start"""
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('moodbase.sql')
    cur = conn.cursor()

    user_id = message.chat.id

    """–°–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä."""
    cur.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    users = cur.fetchall()

    if len(users) == 0:
        cur.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))

    conn.commit()
    cur.close()
    conn.close()

    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç!")
    btn2 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    btn3 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, mess, reply_markup=markup)

"""–•–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
@bot.message_handler(content_types=['text'])
def get_user_messages(message):   
    if message.text == 'üëã –ü—Ä–∏–≤–µ—Ç!':
        bot.send_message(
            message.chat.id,
            '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º!'
        )
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ':
        mess = f'{message.from_user.first_name}! –ö–∞–∫ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?'
        markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
        item2 = types.InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data='normal')
        item3 = types.InlineKeyboardButton("–ü–ª–æ—Ö–æ", callback_data='bad')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, mess, reply_markup=markup)
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ':
        handle_show(message)
    else: 
        bot.send_message(
            message.chat.id,
            '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é('
        )

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫."""
def handle_mood(call):
    if call.data == 'good':
        bot.send_message(call.message.chat.id, '–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!')
    elif call.data == 'normal':
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ!')
    elif call.data == 'bad':
        bot.send_message(call.message.chat.id, '–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å.')
    
    conn = sqlite3.connect('moodbase.sql')
    cur = conn.cursor()

    user_id = call.message.chat.id
    response = call.data
    date = datetime.now()

    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cur.execute('INSERT INTO mood_responses (user_id, date, response) VALUES (?, ?, ?)', (user_id, date, response))

    conn.commit()
    cur.close()
    conn.close()

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'."""
def handle_show(message):
    bot.send_message(message.chat.id, '–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:')

    conn = sqlite3.connect('moodbase.sql')
    cur = conn.cursor()

    user_id = message.chat.id

    """–î–æ—Å—Ç–∞—ë–º –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    cur.execute(f'SELECT response, date FROM mood_responses WHERE user_id={user_id}')
    mood_rows = cur.fetchall()
    mood_responses = [row[0] for row in mood_rows]
    dates = [row[1] for row in mood_rows]

    table = f"{mood_responses[0]}: {dates[0]}"
    
    bot.send_message(message.chat.id, table)

    cur.close()
    conn.close()

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞."""
@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
    if call.data in ['good', 'normal', 'bad']:
        handle_mood(call)

"""–ó–∞–ø—É—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
if __name__ == '__main__':
    setup_database()
    bot.polling(none_stop=True, interval=0)
